--12. Reporting
/*
==========================================================================
Customer Report
==========================================================================
purpose
   -This report consolidates key customer metrics and behaviours

Highlights:
  1.Gathers essential fields such as names,ages,and transaction details.
  2.segments customers into categories(VIP,REGULAR,NEW) and age groups.
  3.Aggregates customer-level metrics.
       -total orders
	   -total sales
	   -total quantity purchased
	   -total products
	   -life span (in months)

  4.Calculates valuable KPIs:
       -recency(months since last order)
	   -average order value
	   -average monthly spend
================================================================================
*/
create view gold.report_customers as
/*--------------------------------------------------------
1.Base query: Retrives core columns from tables
----------------------------------------------------------*/
WITH BASE_QUERY AS(
select
f.order_number,
f.order_date,
f.product_key,
f.sales_amount,
f.quantity,
c.customer_key,c.customer_number,
concat(c.first_name,' ',c.last_name) as customer_name,
datediff(year,c.birthdate,getdate()) as age
from gold.fact_sales f
left join gold.dim_customers c
on c.customer_key=f.customer_key
where order_date is not null)

/*-----------------------------------------------------------------------
2. Customer Aggregations: Summarizes key metrics at the customer level
------------------------------------------------------------------------*/
,Customer_Aggregations AS(
select 
customer_key,
customer_number,
customer_name,
age,
min(order_date) as first_order,
max(order_date) as last_order,
datediff(month,min(order_date),max(order_date)) as lifespan,
sum(sales_amount) as total_sales,
count(distinct order_number) as total_orders,
sum(quantity) as total_quantity,
count(product_key) as total_products
from base_query
group by customer_key,
         customer_number,
		 customer_name,
		 age
)
select 
customer_key,
customer_number,
customer_name,
age,
case when age<20 then 'under 20'
     when age between 20 and 29 then '20-29'
	 when age between 30 and 39 then '30 -39'
	 when age between 40and 49 then '30 -39'
	 else '50 and above'
end age_group,
case when lifespan>=12 and total_sales>5000 then 'VIP'
     when lifespan>=12 and total_sales<=5000 then 'REGULAR'
	 Else 'NEW'
end segment,
last_order,
datediff(month,last_order,getdate()) as recency, --recency
total_sales,
total_orders,
total_quantity,
lifespan,
case when total_sales=0 then 0
     else total_sales/total_orders --average order value
end  as avg_order_value,
--compute average monthly spend
case when lifespan=0 then 0
     else total_sales/lifespan
end  as avg_monthly_spend,
total_products
from Customer_Aggregations

-- count the no. of customers based on the segment also find total sales generated
select count(customer_key) as total_customers,
segment ,sum(total_sales) total_sales
from gold.report_customers
group by segment

--count the total no. of customers on different age group and revenue generated by each group
select age_group,
count(customer_key) as total_customers,
sum(total_sales) total_sales
from gold.report_customers
group by age_group

/*
==========================================================================
product Report
==========================================================================
purpose
   -This report consolidates key product metrics and behaviours

Highlights:
  1.Gathers essential fields such as product names,category,subcategory,costand transaction details.
  2.segments products by revenue to identify high-performers,mid-eange,low-performer.
  3.Aggregates product-level metrics.
       -total orders
	   -total sales
	   -total quantity sold
	   -total customers(unique)
	   -life span (in months)

  4.Calculates valuable KPIs:
       -recency(months since last order)
	   -average order revenue(AOR)
	   -average monthly revenue
================================================================================
*/
create view gold.report_products as
/*--------------------------------------------------------
1.Base query: Retrives core columns from tables
----------------------------------------------------------*/
WITH BASE_QUERY AS(
	select p.product_key,
	p.product_name,
	p.category,
	p.subcategory,
	p.cost,
	f.order_date,
	f.order_number,
	f.customer_key,
	f.sales_amount,
	f.quantity
	from gold.dim_products p
	left join gold.fact_sales f
	on f.product_key=p.product_key
	where order_date is not null --only consider valid sales dates
)

/*-----------------------------------------------------------------------
2. product Aggregations: Summarizes key metrics at the product level
------------------------------------------------------------------------*/
,product_aggregation as(
	select product_key,
	product_name,
	category,
	subcategory,
	cost,
	max(order_date) as last_order,
	datediff(month,min(order_date),max(order_date)) as lifespan,
	count(distinct order_number) as total_orders,
	sum(sales_amount) as total_sales,
	count(distinct customer_key) as total_customers,
	sum(quantity) as total_quantity,
	round(avg(cast(sales_amount as float)/nullif(quantity,0)),1) as avg_selling_price
	from base_query
	group by product_key,product_name,category,subcategory,cost
)
/*-----------------------------------------------------------------------
3. final query: combines all product results into one output
------------------------------------------------------------------------*/
select product_key,product_name,
category,
subcategory,
cost,
last_order,
datediff(month,last_order,getdate()) as recency_months,
lifespan,
total_sales,
case when total_sales>50000 then 'High-performer'
     when total_sales>=10000 then 'mid-range'
	 else 'low-performer'
end product_segment,
total_orders,
total_quantity,
total_customers,
avg_selling_price,
--average order revenue(AOR)
case when total_orders =0 then 0
     else total_sales/total_orders
end avg_order_revenue,
--average month revenue
case when lifespan =0 then 0
     else total_sales/lifespan
end avg_monthly_revenue
from product_aggregation

--which category has highest sales,order,qunatity sold
select category, sum(total_sales) as sales,
count(total_quantity) as quantity_sold from gold.report_products
group by category